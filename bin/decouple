#!/bin/bash

. ~/bioinf-tools/bin/utils

usage()
{
   # Display Help
   separator_line "DecoupleR"
   echo "                usage: decouple [-h] [-X] [ARGS]                                                                   "
   echo "                example: decouple -d path/to/data/counts.csv -e expdata.csv -o path/to/results -r "control" -n 1000 -m 'fgsea' -s DEG.xlsx -v           "
   echo "                                  -d       Path to the counts data frame.                                  "
   echo "                                  -e       Path to the file with the experiment data.                      "
   echo "                                  -o       Folder where the results are saved.                             "
   echo "                                  -r       Specify the name of the reference state of the experiment.      "
   echo "                                  -n       Number of top associations to pull from PROGENy etc. [Default: 500]"
   echo "                                  -m       If specified, runs decouple only on the selected method. Otherwise runs all methods. "
   echo "                                  -s       Path to the DESeq2 results.             "
   echo "                                  -v       If set to 1 prints all messages [default: 1].                   "
   echo "                                  -V       Prints out the tool version.                                    "
   echo "                                  -h       Print this Help.                                                "
   echo "                                  -X       Run in GUI mode (using YAD).                                    "
   echo "                                                                                                           "
   separator_line
}

# Check if GUI mode is selected
GUI_MODE=0
while getopts ":hd:e:o:r:n:m:s:vVX" flag; do
    case "${flag}" in
        h) # Display Help Function
              usage
              exit
        ;;
        X) # Set GUI Mode
              GUI_MODE=1
        ;;
        d) DATA_PATH=${OPTARG}
        ;;
        e) EXPERIMENT_DATA=${OPTARG}
        ;;
        o) OUTFOLDER=${OPTARG}
        ;;
        r) REFERENCE=${OPTARG}
        ;;
        n) TOP_N=${OPTARG}
        ;;
        m) METHODS=${OPTARG}
        ;;
        s) DESEQ_EXP=${OPTARG}
        ;;
        v) VERBOSE=1
        ;;
        V) VERSION="1.0"
           echo $VERSION
           exit
        ;;
        ?)
          echo "Error: Invalid option. Try '-h' to see a list of available options."
          exit
        ;;
        *)
          usage
          exit
        ;;
    esac
done

# Set defaults
if [ $GUI_MODE -eq 1 ]; then
    VERSION="1.0"
    # GUI Mode - YAD Form Dialog with Browse Button
    result=$(yad --form \
        --title="DecoupleR Configuration" \
        --width=800 \
        --field="Counts Data:FL" "" \
        --field="Experiment Data:FL" "" \
        --field="Output Folder:FD" "" \
        --field="Reference State:" "" \
        --field="TOPN:" "500" \
        --field="Methods:" "" \
        --field="DEG file:FL" "" \
        --field="Verbose Mode:CHK" TRUE \
        --field="Run Pathway Inferrence Mode:CHK" TRUE \
        --field="Run TF Inferrence Mode:CHK" TRUE \
        --field="Tool Version:RO" "$VERSION" \
        --separator="," \
        --forms \
        --button="Run:0" \
        --button="Cancel:1")

    if [ $? -ne 0 ]; then
        echo "Operation canceled."
        exit
    fi
    IFS=',' read -r DATA_PATH EXPERIMENT_DATA OUTFOLDER REFERENCE TOP_N METHODS DESEQ_EXP VERBOSE RUN_PATHWAY RUN_TF VERSION <<< "$result"
fi

# else
#     # CLI mode: parse arguments
#     while getopts "d:e:o:n:m:r:s:v:" opt; do
#         case $opt in
#             d) DATA_PATH="$OPTARG" ;;
#             e) EXPERIMENT_DATA="$OPTARG" ;;
#             o) OUTFOLDER="$OPTARG" ;;
#             n) TOP_N="$OPTARG" ;;
#             m) METHODS="$OPTARG" ;;
#             r) REFERENCE="$OPTARG" ;;
#             s) DESEQ_EXP="$OPTARG" ;;
#             v) VERBOSE="$OPTARG" ;;
#             \?) echo "Invalid option: -$OPTARG" >&2; exit 1 ;;
#             :) echo "Option -$OPTARG requires an argument." >&2; exit 1 ;;
#         esac
#     done

#     # Fallback defaults
#     METHODS=${METHODS:-"NULL"}
#     VERBOSE=${VERBOSE:-1}

#     # Check required arguments
#     if [ -z "$DATA_PATH" ] || [ -z "$EXPERIMENT_DATA" ] || [ -z "$OUTFOLDER" ] || [ -z "$TOP_N" ] || [ -z "$REFERENCE" ] || [ -z "$DESEQ_EXP" ]; then
#         echo "Missing required arguments."
#         echo "Usage: $0 -d counts.tsv -e experiment.tsv -o output/ -n 100 -m method -r reference -s deg.tsv -v 1"
#         exit 1
#     fi
# fi

# Main
# Set default values if not provided
# If predefined rank list is not selected, skip it
METHODS="${METHODS:-NULL}"

# If top_n is empty set to default 500
TOP_N="${TOP_N:-500}"

# Convert checkbox result (TRUE/FALSE) to numeric values for the script
if [ "$VERBOSE" == "TRUE" ];
    then
        VERBOSE=1
    else
        VERBOSE=0
fi

SCRIPT_DIR=../
PTH_EXE=R/decouple_pathways.R
TF_EXE=R/decouple_TF.R

RUN_PATHWAY="TRUE"
RUN_TF="TRUE"

if [ "$RUN_PATHWAY" = "TRUE" ]; then
    # Run Pathway Inferrence
    Rscript "$SCRIPT_DIR/$PTH_EXE" \
        -d "$DATA_PATH" \
        -e "$EXPERIMENT_DATA" \
        -o "$OUTFOLDER" \
        -r "$REFERENCE" \
        -n "$TOP_N" \
        -m "$METHODS" \
        -s "$DESEQ_EXP" \
        -v "$VERBOSE"
fi

if [ "$RUN_TF" = "TRUE" ]; then
    # Run Pathway Inferrence
    Rscript "$SCRIPT_DIR/$TF_EXE" \
        -d "$DATA_PATH" \
        -e "$EXPERIMENT_DATA" \
        -o "$OUTFOLDER" \
        -r "$REFERENCE" \
        -m "$METHODS" \
        -s "$DESEQ_EXP" \
        -v "$VERBOSE"
fi

# # Run the R script
# Rscript "$SCRIPT_DIR/run_dcR.R" \
#     -d "$DATA_PATH" \
#     -e "$EXPERIMENT_DATA" \
#     -o "$OUTFOLDER" \
#     -r "$REFERENCE" \
#     -m "$METHODS" \
#     -s "$DESEQ_EXP" \
#     -v "$VERBOSE"




# 
# # OUTPUT_LOG="/tmp/dqGSEA_output.log"

# Rscript $SCRIPT_DIR/run_dcR.R -d "${DATA_PATH}" -e "${EXPERIMENT_DATA}" -o "${OUTFOLDER}" -r "${REFERENCE}" -n "${TOP_N}" -m "${METHODS}" -s "${DESEQ_EXP}" -v "${VERBOSE}"


# Show output log in a YAD dialog
# yad --text-info \
#     --title="dqGSEA Output" \
#     --width=800 \
#     --height=600 \
#     --file="$OUTPUT_LOG"

# Cleanup
# rm -f "$OUTPUT_LOG"

# manage_process $!
